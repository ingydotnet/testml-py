"""
Generated TestML Grammar
"""

import pegex.grammar

class Grammar(pegex.grammar.Grammar):
    def __init__(self, receiver=None, debug=False):
        pegex.grammar.Grammar.__init__(self, receiver=receiver, debug=debug)
        self.grammar = {}
        self.grammar.update(
{ 'NEVER': {'+re': '(?!)'},
  'TOP': { '+all': [ {'+rule': 'NEVER'},
                     {'+rule': 'code_section'},
                     {'+rule': 'data_section'}]},
  '_FIRST_RULE': 'TOP',
  'assertion_call': { '+any': [ {'+rule': 'assertion_eq'},
                                {'+rule': 'assertion_ok'},
                                {'+rule': 'assertion_has'}]},
  'assertion_call_test': { '+re': '(?:\\.(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*|(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\.)(?:EQ|OK|HAS)'},
  'assertion_eq': { '+any': [ {'+rule': 'assertion_operator_eq'},
                              {'+rule': 'assertion_function_eq'}]},
  'assertion_function_eq': { '+all': [ { '+re': '(?:\\.(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*|(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\.)EQ\\('},
                                       {'+rule': 'code_expression'},
                                       {'+re': '\\)'}]},
  'assertion_function_has': { '+all': [ { '+re': '(?:\\.(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*|(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\.)HAS\\('},
                                        {'+rule': 'code_expression'},
                                        {'+re': '\\)'}]},
  'assertion_function_ok': { '+re': '(?:\\.(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*|(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\.)OK(?:\\((?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\))?'},
  'assertion_has': { '+any': [ {'+rule': 'assertion_operator_has'},
                               {'+rule': 'assertion_function_has'}]},
  'assertion_ok': {'+rule': 'assertion_function_ok'},
  'assertion_operator_eq': { '+all': [ { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)+==(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)+'},
                                       {'+rule': 'code_expression'}]},
  'assertion_operator_has': { '+all': [ { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)+~~(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)+'},
                                        {'+rule': 'code_expression'}]},
  'assignment_statement': { '+all': [ {'+rule': 'variable_name'},
                                      {'+re': '\\s+=\\s+'},
                                      {'+rule': 'code_expression'},
                                      {'+rule': 'semicolon'}]},
  'blank_line': {'+re': '[\\ \\t]*\\r?\\n'},
  'block_header': { '+all': [ {'+rule': 'block_marker'},
                              { '+all': [ {'+re': '[\\ \\t]+'},
                                          {'+rule': 'block_label'}],
                                '<': '?'},
                              {'+re': '[\\ \\t]*\\r?\\n'}]},
  'block_label': {'+rule': 'unquoted_string'},
  'block_marker': {'+re': '==='},
  'block_point': { '+any': [ {'+rule': 'lines_point'},
                             {'+rule': 'phrase_point'}]},
  'call_indicator': { '+re': '(?:\\.(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*|(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\.)'},
  'code_expression': { '+all': [ {'+rule': 'code_object'},
                                 {'+rule': 'unit_call', '<': '*'}]},
  'code_object': { '+any': [ {'+rule': 'function_object'},
                             {'+rule': 'point_object'},
                             {'+rule': 'string_object'},
                             {'+rule': 'number_object'},
                             {'+rule': 'transform_object'}]},
  'code_section': { '+any': [ {'+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)+'},
                              {'+rule': 'assignment_statement'},
                              {'+rule': 'code_statement'}],
                    '<': '*'},
  'code_statement': { '+all': [ {'+rule': 'code_expression'},
                                {'+rule': 'assertion_call', '<': '?'},
                                {'+rule': 'semicolon'}]},
  'comment': {'+re': '\\#.*\\r?\\n'},
  'core_transform': {'+re': '([A-Z]\\w*)'},
  'data_block': { '+all': [ {'+rule': 'block_header'},
                            { '+any': [ {'+rule': 'blank_line'},
                                        {'+rule': 'comment'}],
                              '<': '*'},
                            {'+rule': 'block_point', '<': '*'}]},
  'data_section': {'+rule': 'data_block', '<': '*'},
  'double_quoted_string': { '+re': '(?:"(([^\\n\\\\"]|\\\\"|\\\\\\\\|\\\\[0nt])*?)")'},
  'function_object': { '+all': [ {'+rule': 'function_signature', '<': '?'},
                                 { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\{(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*'},
                                 { '+any': [ { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)+'},
                                             { '+rule': 'assignment_statement'},
                                             {'+rule': 'code_statement'}],
                                   '<': '*'},
                                 { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\}'}]},
  'function_signature': { '+all': [ { '+re': '\\((?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*'},
                                    { '+rule': 'function_variables',
                                      '<': '?'},
                                    { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\)'}]},
  'function_variable': {'+re': '([a-zA-Z]\\w*)'},
  'function_variables': { '+all': [ {'+rule': 'function_variable'},
                                    { '+all': [ { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*,(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*'},
                                                { '+rule': 'function_variable'}],
                                      '<': '*'}]},
  'lines_point': { '+all': [ {'+rule': 'point_marker'},
                             {'+re': '[\\ \\t]+'},
                             {'+rule': 'point_name'},
                             {'+re': '[\\ \\t]*\\r?\\n'},
                             {'+rule': 'point_lines'}]},
  'number': {'+re': '([0-9]+)'},
  'number_object': {'+rule': 'number'},
  'phrase_point': { '+all': [ {'+rule': 'point_marker'},
                              {'+re': '[\\ \\t]+'},
                              {'+rule': 'point_name'},
                              {'+re': ':[\\ \\t]'},
                              {'+rule': 'point_phrase'},
                              {'+re': '\\r?\\n'},
                              {'+re': '(?:\\#.*\\r?\\n|[\\ \\t]*\\r?\\n)*'}]},
  'point_lines': {'+re': '((?:(?!===|---).*\\r?\\n)*)'},
  'point_marker': {'+re': '---'},
  'point_name': {'+re': '([a-z]\\w*|[A-Z]\\w*)'},
  'point_object': {'+re': '(\\*[a-z]\\w*)'},
  'point_phrase': {'+re': '(([^\\ \\t\\n\\#](?:[^\\n\\#]*[^\\ \\t\\n\\#])?))'},
  'quoted_string': { '+any': [ {'+rule': 'single_quoted_string'},
                               {'+rule': 'double_quoted_string'}]},
  'semicolon': { '+any': [ {'+re': ';'},
                           {'+error': 'You seem to be missing a semicolon'}]},
  'single_quoted_string': {'+re': "(?:'(([^\\n\\\\']|\\\\'|\\\\\\\\)*?)')"},
  'string_object': {'+rule': 'quoted_string'},
  'transform_argument': {'+rule': 'code_expression'},
  'transform_argument_list': { '+all': [ { '+re': '\\((?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*'},
                                         { '+rule': 'transform_arguments',
                                           '<': '?'},
                                         { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*\\)'}]},
  'transform_arguments': { '+all': [ {'+rule': 'transform_argument'},
                                     { '+all': [ { '+re': '(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*,(?:[\\ \\t]|\\r?\\n|\\#.*\\r?\\n)*'},
                                                 { '+rule': 'transform_argument'}],
                                       '<': '*'}]},
  'transform_name': { '+any': [ {'+rule': 'user_transform'},
                                {'+rule': 'core_transform'}]},
  'transform_object': { '+all': [ {'+rule': 'transform_name'},
                                  { '+rule': 'transform_argument_list',
                                    '<': '?'}]},
  'unit_call': { '+all': [ {'+not': 'assertion_call_test'},
                           {'+rule': 'call_indicator'},
                           {'+rule': 'code_object'}]},
  'unquoted_string': { '+re': '([^\\ \\t\\n\\#](?:[^\\n\\#]*[^\\ \\t\\n\\#])?)'},
  'user_transform': {'+re': '([a-z]\\w*)'},
  'variable_name': {'+re': '([a-zA-Z]\\w*)'}}
)
